#!/usr/bin/env python3
# Imports {{{
import gbulb
import dbus
from dbus.mainloop.glib import DBusGMainLoop
import asyncio
from enum import Enum
from i3ipc import Connection, Event
from collections import OrderedDict
from random import choice
import Xlib.X
import Xlib.Xatom
import Xlib.display
import Xlib.error
import os
import re
import signal
# }}}
# Model {{{
# Handler types {{{


class SignalHandler:
    def __init__(self):
        self.ipc_grp = None

    def register(self, ipc_grp):
        self.ipc_grp = ipc_grp

    def unregister(self):
        ...


class TransientHandler(SignalHandler):
    def __init__(self):
        super().__init__()
        self.__fns = list()
        self.__to_remove = list()
        self.__to_append = list()
        self.__handling = False

    def register(self, ipc_grp):
        super().register(ipc_grp)

    def handler(self, *args, **kwargs):
        if len(self.__fns) > 0:
            self.__handling = True
            for f in self.__fns:
                f(*args, **kwargs)
            self.__handling = False
            if len(self.__to_append) > 0:
                for f in self.__to_append:
                    self.__fns.append(f)
                self.__to_append.clear()
            if len(self.__to_remove) > 0:
                for f in self.__to_remove:
                    self.__fns.remove(f)
                self.__to_remove.clear()

    def push(self, f):
        if self.__handling:
            self.__to_append.append(f)
        else:
            self.__fns.append(f)

    def remove(self, f):
        if self.__handling:
            self.__to_remove.append(f)
        else:
            self.__fns.remove(f)


DBusBus = Enum('DBusBus', ('SYSTEM', 'SESSION'))


class DBusSignalHandler(SignalHandler):
    def __init__(self, bus):
        super().__init__()
        self.bus = bus

    def register(self, ipc_grp):
        super().register(ipc_grp)
        if self.bus == DBusBus.SYSTEM:
            bus = ipc_grp.d_sys()
        elif self.bus == DBusBus.SESSION:
            bus = ipc_grp.d_ses()
        bus.add_signal_receiver(self.handler, **self.dbus_kwargs)


class i3SignalHandler(SignalHandler):
    def __init__(self, event):
        super().__init__()
        self.event = event

    def register(self, ipc_grp):
        super().register(ipc_grp)
        ipc_grp.i3().on(self.event, self.handler)


class i3TransientHandler(TransientHandler):
    def __init__(self, event):
        super().__init__()
        self.event = event

    def register(self, ipc_grp):
        super().register(ipc_grp)
        ipc_grp.i3().on(self.event, self.handler)


NOP_CMD_ARG = re.compile(r'.*nop ([^;, ]+) ?([^;,]*)(;|,|$)')


class i3BindHandler(i3SignalHandler):
    def __init__(self):
        super().__init__(Event.BINDING)

    def handler(self, _, e):
        bcmd = e.binding.command
        if len(bcmd) > 4 and bcmd[0] == 'n' \
                and bcmd[1] == 'o' and bcmd[2] == 'p':
            if m := NOP_CMD_ARG.match(bcmd):
                cmd = m.groups()
                if f := getattr(self, cmd[0], None):
                    if len(cmd[1]) == 0:
                        f()
                    else:
                        f(*cmd[1].split(' '))


class SignalHandlerGroup:
    def __init__(self, *handlers):
        self.handlers = handlers

    def register(self, ipc_grp):
        for handler in self.handlers:
            handler.register(ipc_grp)
# }}}
# IPCGroup {{{


class IPCGroup:
    def __init__(self):
        self.__i3 = None
        self.__d_sys = None
        self.__d_ses = None
        self.__dpy = None
        self.__loop = None
        self.__x_windows = dict()

    def i3(self):
        if self.__i3 is None:
            self.__i3 = Connection()
        return self.__i3

    def pre_loop(self, loop):
        self.__loop = loop
        if self.__i3:
            self.__i3._event_socket_setup()
            loop.add_reader(self.__i3._sub_socket,
                            self.__i3._event_socket_poll)

    def post_loop(self):
        if self.__i3:
            self.__i3._event_socket_teardown()
        if self.__dpy:
            self.__dpy.close()

    def d_sys(self):
        if self.__d_sys is None:
            self.__d_sys = dbus.SystemBus()
        return self.__d_sys

    def d_ses(self):
        if self.__d_ses is None:
            self.__d_ses = dbus.SessionBus()
        return self.__d_ses

    def dpy(self):
        if self.__dpy is None:
            self.__dpy = Xlib.display.Display()
        return self.__dpy

    def get_x_window(self, wid):
        if wid not in self.__x_windows:
            self.__x_windows[wid] = self.dpy(
            ).create_resource_object('window', wid)
        return self.__x_windows[wid]

    def rm_x_window(self, wid):
        if wid in self.__x_windows:
            del self.__x_windows[wid]

    def clear_x_windows(self):
        self.__x_windows.clear()

    def loop(self):
        if self.__loop is None:
            raise RuntimeError(
                'Tried to access event loop before it was ready.')
        return self.__loop

    def quit(self):
        self.__loop.stop()
# }}}
# Desktop utility {{{


class DesktopUtility:
    def __init__(self, sh_grp):
        self.sh_grp = sh_grp

    def run(self, loop):
        self.__loop = loop
        self.ipc_grp = IPCGroup()
        self.sh_grp.register(self.ipc_grp)
        self.ipc_grp.pre_loop(loop)
        try:
            self.__loop.run_forever()
        finally:
            self.ipc_grp.post_loop()
            self.__loop.close()
# }}}
# File mode {{{


class FileMode:
    aliases = {
        os.getenv('USER'): '~',
        'Downloads': 'dl',
        'onedrive': 'ondr',
        'school_onedrive': 'sond'
    }

    def __init__(self, new_window_handler, close_window_handler):
        self.cache = OrderedDict()
        self.out = OrderedDict()
        self.new_window_handler = new_window_handler
        self.close_window_handler = close_window_handler
        self.watching = False
        self.__rofi = None
        self.__w_set = set()
        self.__tmp = list()

    def register(self, ipc_grp):
        self.ipc_grp = ipc_grp
        self.dpy = ipc_grp.dpy()

    def check(self, con):
        return con.window_instance and (con.window_instance == 'caja' or con.window_instance == 'engrampa') and filter_floating(con)

    def new_file_window(self, _, e):
        if self.check(e.container) and e.container.id not in self.cache:
            self.cache[e.container.id] = self.ipc_grp.get_x_window(
                e.container.window)

    def __close_file_window(self, con_id):
        if con_id in self.cache:
            self.cache.pop(con_id, None)
            if len(self.cache) == 0:
                self.unwatch()
                self.ipc_grp.i3().command('mode default')

    def close_file_window(self, _, e):
        if self.check(e.container):
            self.__close_file_window(e.container.id)

    def watch(self):
        if not self.watching:
            self.watching = True
            self.new_window_handler.push(self.new_file_window)
            self.close_window_handler.push(self.close_file_window)

    def unwatch(self):
        if self.watching:
            self.watching = False
            self.new_window_handler.remove(self.new_file_window)
            self.close_window_handler.remove(self.close_file_window)

    def update_cache(self):
        for w in filter(self.check, self.ipc_grp.i3().get_tree()):
            self.__w_set.add(w.id)
            if w.id not in self.cache:
                self.cache[w.id] = self.ipc_grp.get_x_window(w.window)
        for w in set(self.cache.keys()).difference(self.__w_set):
            self.cache.pop(w)
        self.__w_set.clear()

    async def __set_rofi(self):
        proc = await asyncio.create_subprocess_shell(
            'which rofi',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate()
        if proc.returncode == 0 and stdout:
            stdout = stdout.decode()
            self.__rofi = stdout[:len(stdout) - 1]
        else:
            raise RuntimeError('Cannot find the rofi path.')

    async def __show_prompt(self):
        if len(self.cache) == 0:
            return
        if len(self.out) == 0:
            for k in self.cache:
                try:
                    name = self.cache[k].get_wm_name()
                except Xlib.error.BadWindow:
                    self.__tmp.append(k)
                    continue
                if len(name) == 0:
                    continue
                if alias := self.aliases.get(name):
                    name = f'{alias}:{name}'
                if name not in self.out:
                    self.out[name] = k
                else:
                    count = 1
                    new_name = f'{name} {count}'
                    while new_name in self.out:
                        count += 1
                        new_name = f'{name} {count}'
                    self.out[new_name] = k
            if len(self.__tmp) > 0:
                for k in self.__tmp:
                    del self.cache[k]
                self.ipc_grp.clear_x_windows()
                self.__tmp.clear()
        if self.__rofi is None:
            await self.__set_rofi()
        proc = await asyncio.create_subprocess_exec(
            self.__rofi, '-dmenu', '-l', str(len(self.out)), '-p',
            'folder/file', '-kb-custom-1', '[66]', '-kb-custom-2', 'Super_L+f',
            '-w', str(self.cache[next(reversed(self.cache))].id), '-i',
            '-matching', 'regex',
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE)
        stdout, _ = await proc.communicate(bytes('\n'.join(reversed(self.out)), encoding='utf-8'))
        if proc.returncode == 11:
            self.ipc_grp.i3().command('mode default')
            self.out.clear()
        elif stdout:
            stdout = stdout.decode()
            stdout = stdout[:len(stdout) - 1]
            c = self.out[stdout]
            if proc.returncode == 0:
                self.ipc_grp.i3().command(f'[con_id={c}] focus')
                self.cache.move_to_end(c)
                self.out.clear()
            elif proc.returncode == 10:
                self.ipc_grp.i3().command(f'[con_id={c}] kill')
                self.__close_file_window(c)
                del self.out[stdout]
                if len(self.cache) > 0:
                    self.ipc_grp.loop().create_task(self.__show_prompt())

    def show_prompt(self):
        self.ipc_grp.loop().create_task(self.__show_prompt())
# }}}
# }}}
# Helper functions {{{


def find_ws(i3_ws, postfix=None, reverse=False):
    all_ws = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
    for ws in i3_ws:
        if postfix is not None and postfix in ws.name:
            return ws.name
        all_ws.discard(ws.num)
    if reverse:
        new_ws = str(max(all_ws))
    else:
        new_ws = str(min(all_ws))
    if postfix is not None:
        new_ws += ':' + postfix
    return new_ws


def filter_floating(con):
    return con.floating == 'auto_on' or con.floating == 'user_on'
# }}}
# Handlers {{{
# Screensaver {{{


class ScreensaverHandler(DBusSignalHandler):
    def __init__(self):
        super().__init__(DBusBus.SESSION)

    dbus_kwargs = {'dbus_interface': 'org.mate.ScreenSaver'}

    def handler(self, state, *args, **kwargs):
        if state == 1:
            os.system('dunstctl set-paused true')
        elif state == 0:
            os.system('dunstctl set-paused false')
# }}}
# Special workspace {{{


class SpecialWorkspaceHandler(i3SignalHandler):
    def __init__(self):
        super().__init__(Event.WORKSPACE_FOCUS)

    launchers = {
        'b': 'exec --no-startup-id exec $HOME/.i3/chatrc',
        'e': 'exec --no-startup-id exec $HOME/.i3/mailrc',
        'g': 'exec --no-startup-id exec $HOME/.i3/officerc',
        't': 'exec --no-startup-id exec $TERMINAL',
        'w': 'exec --no-startup-id exec $HOME/.i3/webrc',
        'y': 'exec --no-startup-id exec $HOME/.i3/mediarc',
        'z': 'exec --no-startup-id exec $HOME/.i3/gamerc'
    }

    def get_launcher(self, ws):
        return self.launchers.get(ws.name[0])

    def handler(self, i3, e):
        current = e.current
        if len(current.nodes) == 0 and len(current.floating_nodes) == 0:
            if launcher := self.get_launcher(current):
                for ws in i3.get_workspaces():
                    if ws.focused:
                        if ws.name != current.name:
                            return
                        break
                i3.command(launcher)


# }}}
# Keybindings {{{
RANDOM_CHOICES = 'abcdefghijklmnopqrstuvwxyz1234567890'


class KeybindingsHandler(i3BindHandler):
    # Class {{{
    def __init__(self, special_ws, file_mode_handler, new_window_handler):
        super().__init__()
        self.special_ws = special_ws
        self.file_mode_handler = file_mode_handler
        self.new_window_handler = new_window_handler
        self.__st = self.__sk = None

    def register(self, ipc_grp):
        super().register(ipc_grp)
        self.i3 = self.ipc_grp.i3()
    # }}}
    # Run launcher for current workspace {{{

    def launch_this(self):
        for ws in self.i3.get_workspaces():
            if ws.focused:
                if launcher := special_ws.get_launcher(ws):
                    self.i3.command(launcher)
                    break
    # }}}
    # Switch or move to blank workspace {{{

    def blank_ws(self, *args):
        reverse = len(args) > 0 and '--reverse' in args
        move = len(args) > 0 and '--move' in args
        new_ws = find_ws(self.i3.get_workspaces(), reverse=reverse)
        if move:
            self.i3.command(
                f'move container to workspace number {new_ws};workspace number {new_ws}')
        else:
            self.i3.command(f'workspace number {new_ws}')
    # }}}
    # Show/hide scratchpad window {{{
    scratch_focus_ids = {
        'calc': (lambda c: c.find_instanced(r'^scratch_calc$'),
                 'exec --no-startup-id timeout 30s $HOME/.local/lib/dotfiles/misc_scripts/launch $HOME/.local/lib/dotfiles/applications/scratch_calc'),
        'password_man': (lambda c: c.find_classed(r'^KeePassXC$'),
                         'exec --no-startup-id exec keepassxc'),
        'phone_control': (lambda c: c.find_instanced(r'^kdeconnect-app$'),
                          'exec --no-startup-id exec kdeconnect-app'),
        'scratch_term': (lambda c: c.find_instanced(r'^scratch_term$'),
                         'exec "exec mate-terminal --name scratch_term --disable-factory"'),
        'charmap': (lambda c: c.find_instanced(r'^gucharmap$'),
                    'exec exec gucharmap'),
        'timer': (lambda c: c.find_instanced(r'^alarm-clock-applet$'),
                  'exec --no-startup-id exec alarm-clock-applet'),
        'file': (lambda c: c.find_instanced(r'^(caja|engrampa)$'),
                 'exec --no-startup-id exec caja --no-desktop $HOME'),
    }

    def __skip_taskbar(self, windows):
        display = self.ipc_grp.dpy()
        if self.__st is None:
            self.__st = display.intern_atom('_NET_WM_STATE')
        if self.__sk is None:
            self.__sk = [display.intern_atom('_NET_WM_STATE_SKIP_TASKBAR')]
        for wid in windows:
            self.ipc_grp.get_x_window(wid).change_property(self.__st,
                                                           Xlib.Xatom.ATOM, 32,
                                                           self.__sk,
                                                           Xlib.X.PropModeAppend)
        display.flush()

    def scratch_focus(self, name, force_show=False):
        wanted = self.scratch_focus_ids[name]
        t = self.i3.get_tree()
        if force_show:
            cmd = ';'.join(f'[con_id={con.id}] scratchpad show, sticky enable' for con in wanted[0](
                t) if filter_floating(con))
            if len(cmd) > 0:
                self.i3.command(cmd)
                return False
        elif s := t.scratchpad():
            cmd = ';'.join(f'[con_id={con.id}] scratchpad show, sticky enable' for con in wanted[0](
                s) if filter_floating(con))
            if len(cmd) > 0:
                self.i3.command(cmd)
                return False
            found = tuple(filter(filter_floating, wanted[0](t)))
            if len(found) > 0:
                self.i3.command(
                    ';'.join(f'[con_id={con.id}] move scratchpad' for con in found))
                self.__skip_taskbar(c.window for c in found)
                return False
        self.i3.command(wanted[1])
        return True
    # }}}
    # Launch/kill floating window {{{
    launch_or_kill_ids = {
        'audio_control': (lambda c: c.find_instanced(r'^pavucontrol$'),
                          'exec pavucontrol'),
        'network_control': (lambda c: c.find_instanced(r'^nm-connection-editor$'),
                            'exec nm-connection-editor'),
        'bt_control': (lambda c: c.find_instanced(r'^blueman-manager$'),
                       'exec blueman-manager')
    }

    def launch_or_kill(self, name):
        wanted = self.launch_or_kill_ids[name]
        cmd = ';'.join(f'[con_id={con.id}] kill' for con in wanted[0](
            self.i3.get_tree()) if filter_floating(con))
        if len(cmd) > 0:
            self.i3.command(cmd)
            return
        self.i3.command(wanted[1])
    # }}}
    # File mode prompt {{{

    def file_prompt(self):
        self.file_mode_handler.show_prompt()
    # }}}
    # Misc scratchpad {{{
    misc_scratchpad_marker = 'd'

    def __misc_scratchpad_mark_cb(self, i3, e):
        self.new_window_handler.remove(self.__misc_scratchpad_mark_cb)
        if con := i3.get_tree().find_by_id(e.container.id):
            self.__misc_scratchpad_mark(con)

    def __misc_scratchpad_mark(self, con):
        if ws := con.workspace():
            marks = self.i3.get_marks()
            mark = f'{self.misc_scratchpad_marker}{ws.name}:{choice(RANDOM_CHOICES)}'
            while mark in marks:
                mark += choice(RANDOM_CHOICES)
            self.i3.command(
                f'[con_id={con.id}] mark {mark}, floating enable, sticky disable; [con_mark=^{self.misc_scratchpad_marker}{ws.name}:.+] move scratchpad, scratchpad show; [con_id={con.id}] focus')

    def misc_scratchpad_mark(self):
        if foc := self.i3.get_tree().find_focused():
            self.__misc_scratchpad_mark(foc)

    def misc_scratchpad_mark_new(self):
        self.new_window_handler.push(self.__misc_scratchpad_mark_cb)

    def misc_scratchpad(self):
        for ws in self.i3.get_workspaces():
            if ws.focused:
                self.i3.command(
                    f'[con_mark=^{self.misc_scratchpad_marker}{ws.name}:.+] scratchpad show')
                return

    # }}}
# }}}
# Move marked window {{{
MOVE_MARK = re.compile(r'^move:(.+)')


class MarkedWindowMoveHandler(i3SignalHandler):
    def __init__(self):
        super().__init__(Event.WINDOW_MARK)

    def handler(self, i3, e):
        for mark in e.container.marks:
            if m := MOVE_MARK.match(mark):
                i3.command(
                    f'[con_id={e.container.id}] move container to workspace {find_ws(i3.get_workspaces(), postfix=m.groups()[0])}, focus, unmark {mark}')
                return
            elif 'shift' == mark:
                i = 0
                nodes = None
                l = 0
                for c in i3.get_tree():
                    if c.layout == 'tabbed':
                        i = 0
                        nodes = c.nodes
                        l = len(nodes)
                        while i < l and nodes[i].id != e.container.id:
                            i += 1
                        if i != l:
                            cmd = 'move right,' * (l - i)
                            i3.command(
                                f'[con_id={e.container.id}] {cmd}unmark shift')
                            return
                i3.command(f'[con_id={e.container.id}] unmark shift')
                return
# }}}
# New/close window {{{


class NewWindowTransientHandler(i3TransientHandler):
    def __init__(self):
        super().__init__(Event.WINDOW_NEW)


class CloseWindowTransientHandler(i3TransientHandler):
    def __init__(self):
        super().__init__(Event.WINDOW_CLOSE)

    def register(self, ipc_grp):
        super().register(ipc_grp)
        self.push(self.i3_rm_x_window)

    def i3_rm_x_window(self, _, e):
        self.ipc_grp.rm_x_window(e.container.window)
# }}}
# File mode switch handler {{{


class FileModeSwitchHandler(i3SignalHandler):
    def __init__(self, file_mode_handler, keybindings_handler):
        super().__init__(Event.MODE)
        self.file_mode_handler = file_mode_handler
        self.keybindings_handler = keybindings_handler

    def new_cb(self, _, e):
        if self.file_mode_handler.check(e.container):
            self.file_mode_handler.new_window_handler.remove(self.new_cb)
            self.file_mode_handler.show_prompt()

    def handler(self, _, e):
        change = e.change
        if not self.file_mode_handler.watching and len(change) == 4 \
                and change[0] == 'f' and change[1] == 'i' \
                and change[2] == 'l' and change[3] == 'e':
            self.file_mode_handler.watch()
            if self.keybindings_handler.scratch_focus('file', force_show=True):
                self.file_mode_handler.new_window_handler.push(self.new_cb)
            else:
                self.file_mode_handler.update_cache()
                self.file_mode_handler.show_prompt()
        elif self.file_mode_handler.watching and e.change == 'default':
            self.keybindings_handler.scratch_focus('file')
            self.file_mode_handler.unwatch()


# }}}
# }}}
# Main {{{
if __name__ == '__main__':
    gbulb.install(gtk=False)
    DBusGMainLoop(set_as_default=True)

    special_ws = SpecialWorkspaceHandler()
    new_window_handler = NewWindowTransientHandler()
    close_window_handler = CloseWindowTransientHandler()
    file_mode_handler = FileMode(new_window_handler, close_window_handler)
    keybindings_handler = KeybindingsHandler(
        special_ws, file_mode_handler, new_window_handler)
    du = DesktopUtility(SignalHandlerGroup(
        keybindings_handler,
        special_ws,
        MarkedWindowMoveHandler(),
        new_window_handler,
        close_window_handler,
        file_mode_handler,
        FileModeSwitchHandler(file_mode_handler, keybindings_handler),
        ScreensaverHandler()
    ))

    loop = gbulb.get_event_loop()
    loop.add_signal_handler(signal.SIGINT, loop.stop)
    loop.add_signal_handler(signal.SIGTERM, loop.stop)
    du.run(loop)
# }}}
# vim: set foldmethod=marker foldmarker={{{,}}}:
