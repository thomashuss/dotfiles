#!/usr/bin/env python3
import asyncio
import signal
from i3ipc import Event
from i3ipc.aio import Connection
from time import sleep


LAUNCHERS = {
    'b': 'exec --no-startup-id exec $HOME/.i3/chatrc',
    'e': 'exec --no-startup-id exec $HOME/.i3/mailrc',
    'g': 'exec --no-startup-id exec $HOME/.i3/officerc',
    't': 'exec --no-startup-id exec $TERMINAL',
    'w': 'exec --no-startup-id exec $HOME/.i3/webrc',
    'y': 'exec --no-startup-id exec $HOME/.i3/mediarc',
    'z': 'exec --no-startup-id exec $HOME/.i3/gamerc'
}


def get_launcher(ws, override=False):
    if ws.name[0] in LAUNCHERS:
        launcher = LAUNCHERS[ws.name[0]]
        if override:
            return launcher
        for _ in ws:
            return None
        return launcher
    return None


async def on_workspace_focus(i3, e):
    if launcher := get_launcher(e.current):
        sleep(0.01)
        for ws in await i3.get_workspaces():
            if ws.focused and ws.name != e.current.name:
                return
        await i3.command(launcher)


def setup():
    i3 = Connection()
    def quit_handler():
        i3.main_quit()
        exit()
    async def launch_handler():
        for ws in await i3.get_workspaces():
            if ws.focused:
                if launcher := get_launcher(ws, True):
                    await i3.command(launcher)
                break
    loop = asyncio.get_event_loop()
    loop.add_signal_handler(signal.SIGINT, quit_handler)
    loop.add_signal_handler(signal.SIGTERM, quit_handler)
    loop.add_signal_handler(signal.SIGUSR1, lambda: asyncio.create_task(launch_handler()))
    i3.on(Event.WORKSPACE_FOCUS, on_workspace_focus)
    return i3


if __name__ == '__main__':
    async def main():
        await (await setup().connect()).main()
    asyncio.run(main())
